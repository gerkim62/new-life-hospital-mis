generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id        Int      @id @default(autoincrement())
  name      String
  birthDate DateTime
  phone     String
  address   String

  visits PatientVisit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientVisit {
  id String @id @default(uuid())

  labs Lab[]

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int

  arrivalTime DateTime  @default(now())
  leaveTime   DateTime?

  symptoms  String
  diagnosis String?
  treatment String?
  notes     String?

  // array of the stockItems the patient has been given
  stockItemsMovements StockMovement[]
  // array of the drugs prescribed to the patient 
  drugs               Drug[]
  // array of the expenses incurred during the visit  
  expenses            Expense[]
}

model Drug {
  id          String @id @default(uuid())
  name        String
  description String
  dosage      String

  patientVisit   PatientVisit @relation(fields: [patientVisitId], references: [id])
  patientVisitId String

  stockMovement   StockMovement? @relation(fields: [stockMovementId], references: [id]) //for drugs that are dispensed from stock
  stockMovementId String?
}

model Expense {
  id             String       @id @default(uuid())
  name           String
  description    String
  amount         Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  patientVisit   PatientVisit @relation(fields: [patientVisitId], references: [id])
  patientVisitId String
}

model Lab {
  id          String @id @default(uuid())
  name        String
  description String

  feesKes Float
  status  LabStatus @default(PENDING)

  patientVisit   PatientVisit @relation(fields: [patientVisitId], references: [id])
  patientVisitId String
  labResultId    String?
  labResult      LabResult?
}

model LabResult {
  id      String @id @default(uuid())
  value   String
  comment String
  lab     Lab    @relation(fields: [labId], references: [id])
  labId   String @unique
}

model StockItem {
  id          String @id @default(uuid())
  name        String
  description String
  quantity    Int
  unit        String //e.g Kg, Litres, etc

  movements StockMovement[]
}

model StockMovement {
  id            String            @id @default(uuid())
  quantity      Int
  createdAt     DateTime          @default(now())
  description   String?
  type          StockMovementType
  batchPriceKes Float

  item           StockItem     @relation(fields: [itemId], references: [id])
  itemId         String
  PatientVisit   PatientVisit? @relation(fields: [patientVisitId], references: [id])
  patientVisitId String?
  Drug           Drug[]
}

enum StockMovementType {
  IN
  OUT
}

enum LabStatus {
  PENDING
  IN_PROGRESS
  DONE
}
